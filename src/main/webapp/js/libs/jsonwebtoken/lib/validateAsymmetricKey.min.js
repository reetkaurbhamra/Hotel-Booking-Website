const ASYMMETRIC_KEY_DETAILS_SUPPORTED=require("./asymmetricKeyDetailsSupported"),RSA_PSS_KEY_DETAILS_SUPPORTED=require("./rsaPssKeyDetailsSupported"),allowedAlgorithmsForKeys={ec:["ES256","ES384","ES512"],rsa:["RS256","PS256","RS384","PS384","RS512","PS512"],"rsa-pss":["PS256","PS384","PS512"]},allowedCurves={ES256:"prime256v1",ES384:"secp384r1",ES512:"secp521r1"};module.exports=function(e,r){if(e&&r){var s=r.asymmetricKeyType;if(s){const S=allowedAlgorithmsForKeys[s];if(!S)throw new Error(`Unknown key type "${s}".`);if(!S.includes(e))throw new Error(`"alg" parameter for "${s}" key type must be one of: ${S.join(", ")}.`);if(ASYMMETRIC_KEY_DETAILS_SUPPORTED)switch(s){case"ec":var t=r.asymmetricKeyDetails.namedCurve,a=allowedCurves[e];if(t!==a)throw new Error(`"alg" parameter "${e}" requires curve "${a}".`);break;case"rsa-pss":if(RSA_PSS_KEY_DETAILS_SUPPORTED){var t=parseInt(e.slice(-3),10),{hashAlgorithm:a,mgf1HashAlgorithm:o,saltLength:i}=r.asymmetricKeyDetails;if(a!=="sha"+t||o!==a)throw new Error(`Invalid key for this operation, its RSA-PSS parameters do not meet the requirements of "alg" ${e}.`);if(void 0!==i&&t>>3<i)throw new Error(`Invalid key for this operation, its RSA-PSS parameter saltLength does not meet the requirements of "alg" ${e}.`)}}}}};